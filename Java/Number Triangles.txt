/*
ID:   colekor1
LANG: JAVA
TASK: numtri
*/
/*
NAME			:	Cole Koryto
GROUP			:	AP CS
LAST MODIFIED		:	7/13/20
PROBLEM ID		:	Number Triangles
DESCRIPTION		:	In this problem I had to calculate the the largest
                	:   possible sum that could be generated by following
                	:   a path down the given number triangle.
HELPED ME		:	USACO
HELPED			:	None
*/
import java.io.*;
import java.util.*;

class numtri
{
    public static void main(String[] args) throws IOException
    {
        //sets up the number triangle
        Scanner input = new Scanner(new FileReader("numtri.in"));
        int biggestPath = 0;
        int numRows = input.nextInt();

        //finds largest path sum
        int[][] sumTriangle = new int[numRows][numRows];
        sumTriangle[0][0] = input.nextInt();
        int numberValue = 0;
        for(int i = 1; i<numRows; i++)
        {
            for(int j = 0; j<i+1;j++)
            {
                numberValue = input.nextInt();

                //sums for middle values
                if(0<j && j< i)
                {
                    if(sumTriangle[i - 1][j-1] > sumTriangle[i - 1][j])
                    {
                        sumTriangle[i][j] = sumTriangle[i - 1][j-1] + numberValue;
                    }
                    else
                    {
                        sumTriangle[i][j] = sumTriangle[i - 1][j] + numberValue;
                    }
                }

                //sums for left edge
                else if(j == 0)
                {
                    sumTriangle[i][j] = sumTriangle[i - 1][j] + numberValue;
                }

                //sums for right edge
                else
                {
                    sumTriangle[i][j] = sumTriangle[i - 1][j-1] + numberValue;
                }
            }
        }
        input.close();

        //outputs largest path sum
        PrintWriter output = new PrintWriter(new BufferedWriter(new FileWriter("numtri.out")));
        for(int i = 0; i<numRows; i++)
        {
            if (sumTriangle[numRows - 1][i] > biggestPath)
            {
                biggestPath = sumTriangle[numRows - 1][i];
            }
        }
        output.println(biggestPath);
        output.close();
    }
}


