/*
ID:   colekor1
LANG: JAVA
TASK: sprime
*/
/*
NAME			:	Cole Koryto
GROUP			:	AP CS
LAST MODIFIED		:	8/5/20
PROBLEM ID		:	Super Prime
DESCRIPTION		:	In this problem I had to find all the numbers
                	:   	that were Super Prime. I did this by generating.
                	:   	numbers that could be Super Prime then checking
                	:	if that was the case.
HELPED ME		:	USACO, Xavier
HELPED			:	None
*/
import java.io.*;
import java.util.*;

class sprime
{
    private static int digitLimit;
    private static int[] startingNumbers = {2,3,5,7};
    private static int[] addingNumbers = {1,3,7,9};
    private static ArrayList<Integer> primeList = new ArrayList<Integer>();
    private static ArrayList<Integer> outputArrayList = new ArrayList<Integer>();

    public static void addDigits(int currentDepth, int workingNumber)
    {
        //base case
        if(currentDepth > digitLimit)
            return;

        //checks if new number is prime
        boolean valid = true;
        for (int i = 0; primeList.get(i) <= Math.sqrt(workingNumber); i++)
        {
            if (workingNumber % primeList.get(i) == 0)
            {
                valid = false;
                break;
            }
        }
        if(valid)
        {
            //adds new digits
            for(int i = 0; i<4;i++)
                addDigits(currentDepth+1, workingNumber*10+addingNumbers[i]);
        }

	//adds numbers to output if they are corrent length and superprime
        if(valid && currentDepth == digitLimit)
        {
            outputArrayList.add(workingNumber);
        }
    }

    public static void main(String[] args) throws IOException
    {
        //inputs number length and declares variables
        Scanner input = new Scanner(new FileReader("sprime.in"));
        digitLimit = input.nextInt();
        input.close();
        boolean valid;

        //finds all the primes that are half the digits of N
        primeList.add(2);
        for(int value = 3; value <= Math.pow(10,Math.ceil((double)digitLimit/2))-1;value+=2)
        {
            //check each part of the number to see if it's prime
            valid = true;
            for (int i = 0; primeList.get(i) <= Math.sqrt(value); i++)
            {
                if (value % primeList.get(i) == 0)
                {
                    valid = false;
                    break;
                }
            }
            if(valid)
            {
                primeList.add(value);
            }
        }

        //begins recursion to find superprimes
        for(int i = 0; i<4;i++)
            addDigits(1, startingNumbers[i]);

        //outputs any number that was found to be prime and a palindrome
        PrintWriter output = new PrintWriter(new BufferedWriter(new FileWriter("sprime.out")));
        for(int i = 0; i<outputArrayList.size(); i++)
            output.println(outputArrayList.get(i));
        output.close();
    }
}


